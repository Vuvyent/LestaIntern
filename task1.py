import dis

#Задание 1
#=======================================================================================================================
# На языке Python написать алгоритм (функцию) определения четности целого числа, который будет аналогичен
# нижеприведенному по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.
# Пример:
# def isEven(value):
    # return value % 2 == 0


# Код из примера берет остаток от деления на 2 (признак четоного числа - делимость на 2).
# Код, написанный мной совершает побитовое умножение value на 1. Перевод из двоичной системы счисления в десятичную
# выглядит следующим образом (от самого старшего разряда к младшему):
# bit(N)*(2^N) + bit(N-1) * (2^(N-1))...bit(2) * (2^2) + bit(1) * (2^1) + bit(0) * (2^0), где bit(i) -
# соответствующий разряд числа.
# Каждое слагаемое, кроме последнего - либо четное (т.к. является степень 2), либо равно 0 ==> только младший разряд
# определяет четность числа, потому что 2^0 = 1
# Побитовые операции выполняются быстрее, чем взятие остатка от деления, потому что используют простейшие операции.
# Таким образом, если в процессе работы интерпертатора не происходит скрытой оптимизации по замене %2 на &1, то
# предложенный мной вариант должен работать немного быстрее
def first_task(value):
    return value & 1 == 0

